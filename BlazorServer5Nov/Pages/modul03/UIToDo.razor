@page "/todo"
@using System.Text.Json
@inject AufgabenVM VM
@inject IJSRuntime JSRuntime
<h3>UIToDo</h3>
<div class="row">
    <div class="col">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Aufgabe" @bind="NeuAufgabe">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="Neu"><span class="oi oi-plus"></span></button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <div class="list-group">
            @foreach (var item in VM.ListeAufgaben)
            {
            <div class="list-group-item list-group-item-action">
                <h3>@item.Text</h3>
                <input type="checkbox" @bind="item.IsErledigt" />
                @item.Erledigt.ToShortDateString()

            </div>
            }
        </div>

    </div>
</div>



@code {
    string NeuAufgabe;
    void Neu()
    {
        Aufgabe a = new Aufgabe();
        a.Text = NeuAufgabe;
        a.Erledigt = DateTime.Now.AddDays(2);
        VM.Speichern(a);

        var Wert = JsonSerializer.Serialize(VM.ListeAufgaben);

        JSRuntime.InvokeVoidAsync("localStorage.setItem", "Todos", Wert);

    }
    protected override async Task OnInitializedAsync()
    {
        VM.InitAsync();

        try
        {
            var res = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "Todos");
            VM.ListeAufgaben = JsonSerializer.Deserialize<List<Aufgabe>>(res);

        }
        catch (Exception)
        {


        }
   
    }

}
